{
"name" : "Bugjaeger Mobile ADB - Develop & Debug via USB OTG",
"url" : "https://play.google.com/store/apps/details?id=eu.sisik.hackendebug",
"package" : "eu.sisik.hackendebug",
"category" : "Tools",
"description" : "Bugjaeger tries to give you the expert tools used by Android developers for better control and deep understanding of your Android device internals.  Multitool that can save you the hassle of carrying a laptop.  If youre an Android power user, developer, geek, or hacker, this app might be something for you.  How to use 1.) Enable developer options and USB debugging on your target device (https://developer.android.com/studio/debug/dev-options) Note: On Huawei devices you might first need to turn on USB tethering before you enable USB debugging  2.) Connect the device where youve installed this app to the target device via USB OTG cable  3.) Allow the app to access USB device and make sure the target device authorizes USB debugging   Inspecting Android device internals, running shell scripts, checking logs, making screenshots, inspecting backup files, and many more tasks that are normally done on your laptop can now be performed directly between 2 mobile devices.  This app works as sort of Android to Android ADB (Android Debug Bridge) - it offers some features similar to ADB (Android Debug Bridge) and Android Device Monitor, but instead of running on your development machine, it runs directly on your Android device.  You connect your target device through USB OTG cable or through WiFi and youll be able to play around with the device.  ADB protocol is supported also by Android devices other than phones & tablets. That means that you should also be able to control your Android TV, Wear OS watch, or even Raspberry Pi with Android Things OS.   Main features  - running custom shell scripts on target device - remote interactive shell - reading, filtering, and exporting device logs (logcat) - pull APK files  - creating and restoring backups, inspecting and extracting content of backup files - capturing screenshots - performing various commands for controlling your device (rebooting, going to bootloader, rotating screen, killing running apps, ...) - uninstalling and installing packages, checking various details about installed apps - copying apps between phones - monitoring the processes, showing additional information related to processes, killing processes - showing various details about Android version(e.g., SDK version, Android ID,..), Linux kernel, cpu, abi, display - showing battery details (like e.g., temperature, health, technology, voltage,..) - file management - pushing and pulling files from device, browsing the file system - search and connection to Android devices on your network that configured adbd to listen on port 5555 - reading bootloader variables & info via fastboot protocol (e.g. dump some hw info, security state, or if the device was tampered) - exec fastboot commands  For some tricks and examples of what you can do, see  https://www.sisik.eu/blog/tag:bugjaeger  For starting a youtube video or url in browser, add following custom command (or paste this into shell) in the first tab  am start -a android.intent.action.VIEW -d https://www.youtube.com/watch?v=LxKdFlf4Y7E   If you liked this app, check out the ad-free premium version which also contains additional features https://play.google.com/store/apps/details?id=eu.sisik.hackendebug.full   Requirements - Enabled USB debugging in Developer options and authorise the development device - Fastboot protocol support if you want bootloader info (note that the amount and type of information that can be displayed via fastboot will vary between different devices)  Please note This app uses the normal way of communicating with Android devices which requires authorisation. The app does not bypass Androids security mechanisms or anything similar! This also means the app wont be able to perform some privileged tasks on non-rooted devices. ",
"desc_perms" : "['android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_CONTACTS', 'android.permission.READ_EXTERNAL_STORAGE', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_CALL_LOG', 'android.permission.ACCESS_WIFI_STATE', 'android.permission.WRITE_CONTACTS', 'android.permission.ACCESS_NETWORK_STATE', 'android.permission.INTERNET']",
"manifest_perms" : "['android.permission.WRITE_EXTERNAL_STORAGE', 'com.google.android.c2dm.permission.RECEIVE', 'android.permission.WAKE_LOCK', 'android.permission.USB_PERMISSION', 'com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE', 'android.permission.ACCESS_NETWORK_STATE', 'android.permission.INTERNET']",
"perms_with_call" : "['android.permission.ACCESS_COARSE_LOCATION', 'android.permission.ACCESS_FINE_LOCATION', 'android.permission.BROADCAST_STICKY', 'android.permission.WAKE_LOCK', 'android.permission.USE_FINGERPRINT', 'android.permission.GET_TASKS', 'android.permission.ACCESS_NETWORK_STATE', 'android.permission.BLUETOOTH']" 
"extra_perms" : "['android.permission.USB_PERMISSION', 'android.permission.ACCESS_COARSE_LOCATION', 'android.permission.ACCESS_FINE_LOCATION']",
}